////////////////////////////////////////////////////////////////////////////////
//       _________                     ___________     ___     __
//      /   _____/ ____ ___  ______ __ \__    ___/____ \_ |__ |  |   ____
//      \_____  \_/ __ \\  \/  <   |  |  |    |  \__  \ | __ \|  | _/ __ \
//      /        \  ___/ >    < \___  |  |    |   / __ \| \_\ \  |_\  ___/
//     /_______  /\___  >__/\_ \/ ____|  |____|  (____  /___  /____/\___  >
//             \/     \/      \/\/                    \/    \/          \/
// -----------------------------------------------------------------------------
//          Designed and Developed by Brad Jones <brad @="bjc.id.au" />
// -----------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////

/**
 * NOTE: We make an assumption and a recommendation that a CSS reset
 * such as normalize.css will be used in conjuction with this stylesheet.
 *
 * @see http://necolas.github.io/normalize.css/
 */

.sexy-table
{
    // We use box sizing inside our sexy tables.
    &, & *
    {
        -webkit-box-sizing: border-box;
        -moz-box-sizing: border-box;
        box-sizing: border-box;
    }

    // Sexy Tables are hidden on page load because we need to let the
    // javascript calculate the cell width, until this has happened
    // the table will look awful.
    visibility: hidden;

    // Sexy Tables expand to take up the entire width of their container.
    width: 100%;

    // Sexy Tables use UL elements for each table row.
    ul
    {
        // Reset the UL list styles
        list-style: none;
        margin:0;
        padding:0;

        // Micro Clear Fix, ensures each row starts on a new line.
        zoom: 1;
        &:before, &:after { content: ""; display: table; }
        &:after { clear: both; }

        // The row expands to take up the entire width of the table.
        width: 100%;

        // Obviously an LI element represents a table cell.
        li
        {
            // Place all cells onto one line.
            float: left;

            // Make sure the cell expands to take up the full height of the row.
            // This is important so that borders extend to meet the next row.
            height: 100%;

            // We actually use some of the built in table styles.
            // This enables the vertical align trick below.
            //
            // NOTE: That because the li is no longer a block element and has
            // table like properties. When it's width becomes smaller enough for
            // it's content to overflow the layout will break. This is where we
            // need to use media queries to for example make the font size
            // smaller.
            display: table;

            // Each cell gets an inner container inserted into it by the js.
            .inner
            {
                // Vertically align the content of the cell.
                display: table-cell;
                vertical-align: middle;

                // Provide some spacing between each cell
                padding: 1em;
            }
        }
    }

    // This will apply some very plain and simple borders to the table.
    ul
    {
        border-top: 1px solid #000;
        border-right: 1px solid #000;

        &:last-of-type
        {
            border-bottom: 1px solid #000;
        }

        li
        {
            border-left: 1px solid #000;
        }
    }

    // Centers all column heading and bolds the text
    & .thead
    {
        .inner
        {
            text-align: center;
            font-weight: bold;
        }
    }

    // If the table is sortable let style the font awesome icons
    &.sortable
    {
        .thead
        {
            .inner
            {
                // Because we make the entire cell clickable for sorting
                // the user can easily select text and looks ugly, this
                // stops the heading text from being selected.
                -webkit-touch-callout: none;
                -webkit-user-select: none;
                -khtml-user-select: none;
                -moz-user-select: none;
                -ms-user-select: none;
                user-select: none;

                i
                {
                    padding-left: 5px;
                }
            }
        }
    }

    // Make sure the filters stay within their cells
    &.filterable
    {
        .thead
        {
            input
            {
                width:100%;
            }
        }
    }
}
